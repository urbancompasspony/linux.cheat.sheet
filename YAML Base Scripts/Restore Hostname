#!/bin/bash

# =============================================================================
# SCRIPT PARA AUTO-APLICA√á√ÉO DE HOSTNAME DO SYSTEM.YAML
# =============================================================================
# Este script pode ser usado para aplicar automaticamente o hostname
# salvo no system.yaml em sistemas rec√©m-instalados ou restaurados

YAML_FILE="/srv/system.yaml"

# Fun√ß√£o para obter hostname do system.yaml
function get_hostname_from_yaml {
  if [ ! -f "$YAML_FILE" ]; then
    return 1
  fi
  
  # Verifica se yq est√° dispon√≠vel
  if ! command -v yq >/dev/null 2>&1; then
    echo "ERRO: yq n√£o est√° instalado. Instale com: sudo apt install yq" >&2
    return 1
  fi
  
  hostname_from_yaml=$(yq -r '.Sistema.Hostname // empty' "$YAML_FILE" 2>/dev/null)
  echo "$hostname_from_yaml"
}

# Fun√ß√£o principal para aplica√ß√£o autom√°tica
function auto_apply_hostname {
  local current_hostname=$(hostname)
  local yaml_hostname=$(get_hostname_from_yaml)
  
  echo "üîç Verificando configura√ß√£o de hostname..."
  echo "   Hostname atual: $current_hostname"
  
  # Se n√£o h√° hostname definido no YAML, n√£o faz nada
  if [ -z "$yaml_hostname" ]; then
    echo "‚ÑπÔ∏è  Hostname n√£o definido no system.yaml"
    echo "   Nenhuma a√ß√£o necess√°ria"
    return 0
  fi
  
  echo "   Hostname no YAML: $yaml_hostname"
  
  # Se j√° est√° sincronizado, n√£o faz nada
  if [ "$current_hostname" = "$yaml_hostname" ]; then
    echo "‚úÖ Hostname j√° est√° sincronizado"
    return 0
  fi
  
  echo "‚ö†Ô∏è  Hostname do sistema difere do configurado no YAML"
  
  # Verifica se deve aplicar automaticamente
  local auto_apply=false
  
  # Aplica automaticamente se hostname atual √© um dos padr√µes
  if [[ "$current_hostname" =~ ^(ubuntu|debian|localhost|server)$ ]]; then
    auto_apply=true
    echo "üîÑ Hostname padr√£o detectado - aplicando automaticamente..."
  fi
  
  # Se n√£o √© padr√£o, pergunta ao usu√°rio (se est√° em terminal interativo)
  if [ "$auto_apply" = false ]; then
    if [ -t 0 ]; then  # Se est√° em terminal interativo
      echo ""
      echo "‚ùì Deseja aplicar o hostname do system.yaml?"
      echo "   De: $current_hostname"
      echo "   Para: $yaml_hostname"
      read -p "   Aplicar? (y/N): " response
      
      if [[ "$response" =~ ^[Yy]$ ]]; then
        auto_apply=true
      else
        echo "‚ùå Aplica√ß√£o cancelada pelo usu√°rio"
        return 0
      fi
    else
      echo "‚ö†Ô∏è  Terminal n√£o interativo - aplica√ß√£o autom√°tica cancelada"
      echo "   Execute manualmente: sudo hostnamectl set-hostname $yaml_hostname"
      return 1
    fi
  fi
  
  if [ "$auto_apply" = true ]; then
    apply_hostname_from_yaml "$yaml_hostname" "$current_hostname"
  fi
}

# Fun√ß√£o para aplicar hostname do YAML
function apply_hostname_from_yaml {
  local new_hostname="$1"
  local current_hostname="$2"
  local datetime=$(date +"%d/%m/%Y - %H:%M:%S")
  
  echo "üöÄ Aplicando hostname '$new_hostname'..."
  
  # Verifica se script est√° rodando como root
  if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Este script precisa ser executado como root"
    echo "   Execute: sudo $0"
    return 1
  fi
  
  # Backup do /etc/hosts
  local backup_file="/tmp/hosts_backup_$(date +%s)"
  if ! cp /etc/hosts "$backup_file"; then
    echo "‚ùå Falha ao criar backup do /etc/hosts"
    return 1
  fi
  
  echo "üìã Backup do /etc/hosts salvo em: $backup_file"
  
  # 1. Altera via hostnamectl
  echo "üîß Configurando hostname via hostnamectl..."
  if ! hostnamectl set-hostname "$new_hostname"; then
    echo "‚ùå Falha ao definir hostname via hostnamectl"
    return 1
  fi
  
  # 2. Atualiza /etc/hosts
  echo "üîß Atualizando /etc/hosts..."
  
  # Remove entradas antigas do hostname
  sed -i "/$current_hostname/d" /etc/hosts
  
  # Adiciona novas entradas
  if ! grep -q "127.0.0.1.*$new_hostname" /etc/hosts; then
    sed -i "1a\\127.0.0.1\t$new_hostname" /etc/hosts
  fi
  
  if ! grep -q "127.0.1.1.*$new_hostname" /etc/hosts; then
    sed -i "/127.0.0.1.*$new_hostname/a\\127.0.1.1\t$new_hostname" /etc/hosts
  fi
  
  # 3. Atualiza /etc/hostname
  echo "üîß Atualizando /etc/hostname..."
  echo "$new_hostname" | tee /etc/hostname > /dev/null
  
  # 4. Atualiza data de aplica√ß√£o no YAML
  if [ -f "$YAML_FILE" ] && command -v yq >/dev/null 2>&1; then
    echo "üìù Atualizando data de aplica√ß√£o no system.yaml..."
    yq -i ".Sistema.Data_Aplicacao = \"$datetime\"" "$YAML_FILE"
  fi
  
  # 5. Verifica se a altera√ß√£o foi bem-sucedida
  sleep 1
  local verification_hostname=$(hostnamectl --static)
  
  if [ "$verification_hostname" = "$new_hostname" ]; then
    echo ""
    echo "‚úÖ HOSTNAME APLICADO COM SUCESSO!"
    echo "   Anterior: $current_hostname"
    echo "   Novo: $new_hostname"
    echo "   Data: $datetime"
    echo ""
    echo "üí° Recomenda√ß√£o: Reinicie o sistema para garantir que todas"
    echo "   as aplica√ß√µes reconhe√ßam a mudan√ßa."
    echo "   Comando: sudo reboot"
    echo ""
    return 0
  else
    echo "‚ùå ERRO: Falha na verifica√ß√£o do hostname"
    echo "   Restaurando backup..."
    cp "$backup_file" /etc/hosts
    echo "   Backup restaurado"
    return 1
  fi
}

# Fun√ß√£o para exibir informa√ß√µes detalhadas
function show_hostname_status {
  local current_hostname=$(hostname)
  local yaml_hostname=$(get_hostname_from_yaml)
  
  echo "üñ•Ô∏è  INFORMA√á√ïES DO HOSTNAME"
  echo "================================"
  echo "Hostname atual do sistema: $current_hostname"
  echo "Hostname est√°tico: $(hostnamectl --static)"
  echo "Hostname transiente: $(hostnamectl --transient)"
  echo "FQDN: $(hostname -f 2>/dev/null || echo 'N√£o dispon√≠vel')"
  echo ""
  
  if [ -n "$yaml_hostname" ]; then
    echo "üìÑ CONFIGURA√á√ÉO NO SYSTEM.YAML:"
    echo "Hostname definido: $yaml_hostname"
    
    if [ -f "$YAML_FILE" ] && command -v yq >/dev/null 2>&1; then
      local yaml_date=$(yq -r '.Sistema.Data_Hostname // "N√£o dispon√≠vel"' "$YAML_FILE" 2>/dev/null)
      local yaml_applied=$(yq -r '.Sistema.Data_Aplicacao // "Nunca aplicado"' "$YAML_FILE" 2>/dev/null)
      echo "Data de defini√ß√£o: $yaml_date"
      echo "√öltima aplica√ß√£o: $yaml_applied"
    fi
    
    echo ""
    if [ "$current_hostname" = "$yaml_hostname" ]; then
      echo "‚úÖ STATUS: Hostname sincronizado"
    else
      echo "‚ö†Ô∏è  STATUS: Hostname desatualizado"
      echo "   Use: sudo $0 --apply para sincronizar"
    fi
  else
    echo "‚ùå CONFIGURA√á√ÉO NO SYSTEM.YAML:"
    echo "Hostname n√£o definido no arquivo"
  fi
  
  echo ""
  echo "üìã ARQUIVO /etc/hosts (entradas relevantes):"
  grep -E "(127\.0\.0\.1|127\.0\.1\.1)" /etc/hosts | head -5
}

# Fun√ß√£o para mostrar ajuda
function show_help {
  echo "üîß GERENCIADOR DE HOSTNAME DO SYSTEM.YAML"
  echo "=========================================="
  echo ""
  echo "USAGE: $0 [OP√á√ÉO]"
  echo ""
  echo "OP√á√ïES:"
  echo "  --apply, -a       Aplica hostname do system.yaml (interativo se necess√°rio)"
  echo "  --force, -f       For√ßa aplica√ß√£o sem perguntar"
  echo "  --status, -s      Mostra status atual do hostname"
  echo "  --help, -h        Mostra esta ajuda"
  echo ""
  echo "EXEMPLOS:"
  echo "  $0                    # Execu√ß√£o padr√£o (aplica se hostname for padr√£o)"
  echo "  $0 --apply           # Aplica hostname do YAML (pergunta se necess√°rio)"
  echo "  $0 --force           # For√ßa aplica√ß√£o sem perguntar"
  echo "  $0 --status          # Apenas mostra informa√ß√µes"
  echo ""
  echo "ARQUIVOS:"
  echo "  $YAML_FILE    # Arquivo de configura√ß√£o"
  echo "  /etc/hostname         # Arquivo de hostname do sistema"
  echo "  /etc/hosts            # Arquivo de resolu√ß√£o local"
  echo ""
  echo "DEPEND√äNCIAS:"
  echo "  - yq (sudo apt install yq)"
  echo "  - hostnamectl (systemd)"
  echo ""
}

# Fun√ß√£o para instalar depend√™ncias
function install_dependencies {
  echo "üì¶ Verificando depend√™ncias..."
  
  local missing_deps=()
  
  # Verifica yq
  if ! command -v yq >/dev/null 2>&1; then
    missing_deps+=("yq")
  fi
  
  # Verifica hostnamectl (parte do systemd)
  if ! command -v hostnamectl >/dev/null 2>&1; then
    missing_deps+=("systemd")
  fi
  
  if [ ${#missing_deps[@]} -gt 0 ]; then
    echo "‚ùå Depend√™ncias faltando: ${missing_deps[*]}"
    echo ""
    echo "Para instalar:"
    
    for dep in "${missing_deps[@]}"; do
      case "$dep" in
        "yq")
          echo "  sudo apt update && sudo apt install yq -y"
          ;;
        "systemd")
          echo "  sudo apt update && sudo apt install systemd -y"
          ;;
      esac
    done
    
    echo ""
    read -p "Instalar depend√™ncias automaticamente? (y/N): " install_deps
    
    if [[ "$install_deps" =~ ^[Yy]$ ]]; then
      echo "üöÄ Instalando depend√™ncias..."
      
      if [ "$EUID" -ne 0 ]; then
        echo "‚ùå Precisa de privil√©gios de root para instalar depend√™ncias"
        echo "   Execute: sudo $0"
        return 1
      fi
      
      apt update
      for dep in "${missing_deps[@]}"; do
        case "$dep" in
          "yq") apt install yq -y ;;
          "systemd") apt install systemd -y ;;
        esac
      done
      
      echo "‚úÖ Depend√™ncias instaladas com sucesso!"
      return 0
    else
      echo "‚ùå Instala√ß√£o cancelada"
      return 1
    fi
  else
    echo "‚úÖ Todas as depend√™ncias est√£o instaladas"
    return 0
  fi
}

# Fun√ß√£o para validar arquivo YAML
function validate_yaml_file {
  if [ ! -f "$YAML_FILE" ]; then
    echo "‚ùå Arquivo system.yaml n√£o encontrado em: $YAML_FILE"
    echo ""
    echo "üí° O arquivo system.yaml deve conter uma se√ß√£o como esta:"
    echo ""
    echo "Sistema:"
    echo "  Hostname: \"meu-servidor\""
    echo "  Data_Hostname: \"$(date +'%d/%m/%Y - %H:%M:%S')\""
    echo ""
    return 1
  fi
  
  if ! command -v yq >/dev/null 2>&1; then
    echo "‚ùå yq n√£o est√° instalado"
    return 1
  fi
  
  # Verifica se o arquivo √© um YAML v√°lido
  if ! yq -e '.' "$YAML_FILE" >/dev/null 2>&1; then
    echo "‚ùå Arquivo system.yaml cont√©m YAML inv√°lido"
    return 1
  fi
  
  return 0
}

# =============================================================================
# MAIN - PROCESSAMENTO DE ARGUMENTOS E EXECU√á√ÉO
# =============================================================================

# Verifica argumentos de linha de comando
case "${1:-}" in
  --help|-h)
    show_help
    exit 0
    ;;
  --status|-s)
    validate_yaml_file || exit 1
    show_hostname_status
    exit 0
    ;;
  --apply|-a)
    validate_yaml_file || exit 1
    install_dependencies || exit 1
    
    # For√ßa modo interativo
    export FORCE_INTERACTIVE=true
    auto_apply_hostname
    exit $?
    ;;
  --force|-f)
    validate_yaml_file || exit 1
    install_dependencies || exit 1
    
    # For√ßa aplica√ß√£o sem perguntar
    current_hostname=$(hostname)
    yaml_hostname=$(get_hostname_from_yaml)
    
    if [ -z "$yaml_hostname" ]; then
      echo "‚ùå Hostname n√£o definido no system.yaml"
      exit 1
    fi
    
    if [ "$current_hostname" = "$yaml_hostname" ]; then
      echo "‚úÖ Hostname j√° est√° sincronizado: $current_hostname"
      exit 0
    fi
    
    echo "üîÑ For√ßando aplica√ß√£o do hostname..."
    echo "   De: $current_hostname"
    echo "   Para: $yaml_hostname"
    
    if [ "$EUID" -ne 0 ]; then
      echo "‚ùå Este script precisa ser executado como root para --force"
      echo "   Execute: sudo $0 --force"
      exit 1
    fi
    
    apply_hostname_from_yaml "$yaml_hostname" "$current_hostname"
    exit $?
    ;;
  --install-deps)
    install_dependencies
    exit $?
    ;;
  "")
    # Execu√ß√£o padr√£o - aplica√ß√£o autom√°tica inteligente
    validate_yaml_file || exit 1
    install_dependencies || exit 1
    auto_apply_hostname
    exit $?
    ;;
  *)
    echo "‚ùå Op√ß√£o inv√°lida: $1"
    echo ""
    show_help
    exit 1
    ;;
esac
