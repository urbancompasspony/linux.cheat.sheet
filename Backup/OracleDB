#!/bin/bash
# COLD backup script for Oracle Express 21c!
# Data da última modificação: 30/03/2025
# Crontab
# 00 12 * *1-5 bash /srv/containers/scripts/Backup_KVM
# 00 16 * *1-5 bash /srv/containers/scripts/Backup_KVM

################################################################################
# Control Panel #
# LOCAL: 40 dias!
# EXTERNO: 90 DIAS!

# Variáveis
data=$(date +"%d_%m_%y_-_%H_%M")
getpath="/home/administrador/Shared/"
bacpath="/mnt/disk01/BKP_Oracle/"
extpath="/mnt/externo/Oracle/"
logs="/srv/containers/scripts/Logs_Backup"
max_local_days=45
max_ext_days=90
min_space=10000000  # 5GB em KB

# Prevenir execução simultânea
LOCKFILE="/tmp/oracle_backup.lock"
if [ -e "${LOCKFILE}" ] && kill -0 "$(cat "${LOCKFILE}")"; then
    echo "Backup já está em execução."
    exit 1
fi

# Garantir que o lockfile será removido quando o script terminar
trap 'rm -f "${LOCKFILE}"; exit $?' INT TERM EXIT
echo $$ > "${LOCKFILE}"

# Início do backup
echo "Backup iniciado em ${data}" | tee -a "${logs}"

# Verificar se os diretórios existem
for dir in "${getpath}" "${bacpath}"; do
    if [ ! -d "${dir}" ]; then
        echo "${data} - ERRO: Diretório ${dir} não existe!" | tee -a "${logs}"
        exit 1
    fi
done

avail_space=$(df -k "${bacpath}" | awk 'NR==2 {print $4}')
if [ "${avail_space}" -lt "${min_space}" ]; then
    echo "${data} - ERRO: Espaço insuficiente em ${bacpath}. Disponível: ${avail_space}KB" | tee -a "${logs}"
    exit 1
fi

# Remover arquivos antigos no backup local
# O -delete é mais seguro que executar rm
if [ -d "${bacpath}" ]; then
    echo "Removendo arquivos locais com mais de ${max_local_days} dias..." | tee -a "${logs}"
    find "${bacpath}" -type f -mtime +"${max_local_days}" -delete
fi

# Executar o rsync e verificar resultado
echo "Copiando arquivos de ${getpath} para ${bacpath}..." | tee -a "${logs}"
rsync -a "${getpath}" "${bacpath}"
if [ $? -ne 0 ]; then
    echo "${data} - ERRO: Falha no rsync local!" | tee -a "${logs}"
    exit 1
fi
sync

# Verificar e montar disco externo
disk2=$(/bin/mount /mnt/externo 2>/dev/null && echo "sim" || echo "nao")
if [ "${disk2}" = "sim" ]; then
    # Verificar se o diretório de backup externo existe
    if [ ! -d "${extpath}" ]; then
        echo "${data} - ERRO: Diretório externo ${extpath} não existe!" | tee -a "${logs}"
        /bin/umount /mnt/externo
        exit 1
    fi
    
    # Verificar espaço no disco externo
    avail_ext_space=$(df -k "${extpath}" | awk 'NR==2 {print $4}')
    if [ "${avail_ext_space}" -lt "${min_space}" ]; then
        echo "${data} - ERRO: Espaço insuficiente em ${extpath}. Disponível: ${avail_ext_space}KB" | tee -a "${logs}"
        /bin/umount /mnt/externo
        exit 1
    fi
    
    # Remover arquivos antigos no backup externo
    echo "Removendo arquivos externos com mais de ${max_ext_days} dias..." | tee -a "${logs}"
    find "${extpath}" -type f -mtime +"${max_ext_days}" -delete
    
    # Executar o rsync para o disco externo e verificar resultado
    echo "Copiando arquivos de ${bacpath} para ${extpath}..." | tee -a "${logs}"
    rsync -a "${bacpath}" "${extpath}"
    if [ $? -ne 0 ]; then
        echo "${data} - ERRO: Falha no rsync externo!" | tee -a "${logs}"
        /bin/umount /mnt/externo
        exit 1
    fi
    sync
    
    # Otimizar uso de disco
    echo "Executando fstrim..." | tee -a "${logs}"
    fstrim -a
    
    # Desmontar disco externo
    /bin/umount /mnt/externo
    if [ $? -ne 0 ]; then
        echo "${data} - AVISO: Falha ao desmontar disco externo!" | tee -a "${logs}"
    fi
else
    echo "${data} - ERRO: Disco externo ausente!" | tee -a "${logs}"
    echo "${data} - ERRO: Apenas o backup local foi executado." | tee -a "${logs}"
fi

# Limpar diretório de origem após backup bem-sucedido
if [ -n "${getpath}" ] && [ "${getpath}" != "/" ]; then
    echo "Limpando diretório de origem..." | tee -a "${logs}"
    rm -rf "${getpath:?}/"*
else
    echo "${data} - ERRO: Variável getpath vazia ou inválida!" | tee -a "${logs}"
    exit 1
fi

# Finalizar backup
data=$(date +"%d_%m_%y_-_%H_%M")
echo "Backup concluído em ${data}" | tee -a "${logs}"
echo " " | tee -a "${logs}"

# Remover arquivo de lock
rm -f "${LOCKFILE:?}"
exit 0
